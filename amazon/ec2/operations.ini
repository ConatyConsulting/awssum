* Writing AllocateAddress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AllocateAddress',
  operationname: 'allocate-address',
  defaults: { Action: 'AllocateAddress' } }
* Writing AssignPrivateIpAddresses
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AssignPrivateIpAddresses',
  operationname: 'assign-private-ip-addresses',
  defaults: { Action: 'AssignPrivateIpAddresses' } }
* Writing AssociateAddress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AssociateAddress',
  operationname: 'associate-address',
  defaults: { Action: 'AssociateAddress' } }
* Writing AssociateDhcpOptions
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AssociateDhcpOptions',
  operationname: 'associate-dhcp-options',
  defaults: { Action: 'AssociateDhcpOptions' } }
* Writing AssociateRouteTable
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AssociateRouteTable',
  operationname: 'associate-route-table',
  defaults: { Action: 'AssociateRouteTable' } }
* Writing AttachInternetGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AttachInternetGateway',
  operationname: 'attach-internet-gateway',
  defaults: { Action: 'AttachInternetGateway' } }
* Writing AttachNetworkInterface
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AttachNetworkInterface',
  operationname: 'attach-network-interface',
  defaults: { Action: 'AttachNetworkInterface' } }
* Writing AttachVolume
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AttachVolume',
  operationname: 'attach-volume',
  defaults: { Action: 'AttachVolume' } }
* Writing AttachVpnGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AttachVpnGateway',
  operationname: 'attach-vpn-gateway',
  defaults: { Action: 'AttachVpnGateway' } }
* Writing AuthorizeSecurityGroupEgress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AuthorizeSecurityGroupEgress',
  operationname: 'authorize-security-group-egress',
  defaults: { Action: 'AuthorizeSecurityGroupEgress' } }
* Writing AuthorizeSecurityGroupIngress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'AuthorizeSecurityGroupIngress',
  operationname: 'authorize-security-group-ingress',
  defaults: { Action: 'AuthorizeSecurityGroupIngress' } }
* Writing BundleInstance
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'BundleInstance',
  operationname: 'bundle-instance',
  defaults: { Action: 'BundleInstance' } }
* Writing CancelBundleTask
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CancelBundleTask',
  operationname: 'cancel-bundle-task',
  defaults: { Action: 'CancelBundleTask' } }
* Writing CancelConversionTask
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CancelConversionTask',
  operationname: 'cancel-conversion-task',
  defaults: { Action: 'CancelConversionTask' } }
* Writing CancelExportTask
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CancelExportTask',
  operationname: 'cancel-export-task',
  defaults: { Action: 'CancelExportTask' } }
* Writing CancelSpotInstanceRequests
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CancelSpotInstanceRequests',
  operationname: 'cancel-spot-instance-requests',
  defaults: { Action: 'CancelSpotInstanceRequests' } }
* Writing ConfirmProductInstance
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ConfirmProductInstance',
  operationname: 'confirm-product-instance',
  defaults: { Action: 'ConfirmProductInstance' } }
* Writing CreateCustomerGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateCustomerGateway',
  operationname: 'create-customer-gateway',
  defaults: { Action: 'CreateCustomerGateway' } }
* Writing CreateDhcpOptions
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateDhcpOptions',
  operationname: 'create-dhcp-options',
  defaults: { Action: 'CreateDhcpOptions' } }
* Writing CreateImage
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateImage',
  operationname: 'create-image',
  defaults: { Action: 'CreateImage' } }
* Writing CreateInstanceExportTask
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateInstanceExportTask',
  operationname: 'create-instance-export-task',
  defaults: { Action: 'CreateInstanceExportTask' } }
* Writing CreateInternetGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateInternetGateway',
  operationname: 'create-internet-gateway',
  defaults: { Action: 'CreateInternetGateway' } }
* Writing CreateKeyPair
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateKeyPair',
  operationname: 'create-key-pair',
  defaults: { Action: 'CreateKeyPair' } }
* Writing CreateNetworkAcl
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateNetworkAcl',
  operationname: 'create-network-acl',
  defaults: { Action: 'CreateNetworkAcl' } }
* Writing CreateNetworkAclEntry
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateNetworkAclEntry',
  operationname: 'create-network-acl-entry',
  defaults: { Action: 'CreateNetworkAclEntry' } }
* Writing CreateNetworkInterface
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateNetworkInterface',
  operationname: 'create-network-interface',
  defaults: { Action: 'CreateNetworkInterface' } }
* Writing CreatePlacementGroup
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreatePlacementGroup',
  operationname: 'create-placement-group',
  defaults: { Action: 'CreatePlacementGroup' } }
* Writing CreateRoute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateRoute',
  operationname: 'create-route',
  defaults: { Action: 'CreateRoute' } }
* Writing CreateRouteTable
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateRouteTable',
  operationname: 'create-route-table',
  defaults: { Action: 'CreateRouteTable' } }
* Writing CreateSecurityGroup
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateSecurityGroup',
  operationname: 'create-security-group',
  defaults: { Action: 'CreateSecurityGroup' } }
* Writing CreateSnapshot
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateSnapshot',
  operationname: 'create-snapshot',
  defaults: { Action: 'CreateSnapshot' } }
* Writing CreateSpotDatafeedSubscription
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateSpotDatafeedSubscription',
  operationname: 'create-spot-datafeed-subscription',
  defaults: { Action: 'CreateSpotDatafeedSubscription' } }
* Writing CreateSubnet
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateSubnet',
  operationname: 'create-subnet',
  defaults: { Action: 'CreateSubnet' } }
* Writing CreateTags
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateTags',
  operationname: 'create-tags',
  defaults: { Action: 'CreateTags' } }
* Writing CreateVolume
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateVolume',
  operationname: 'create-volume',
  defaults: { Action: 'CreateVolume' } }
* Writing CreateVpc
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateVpc',
  operationname: 'create-vpc',
  defaults: { Action: 'CreateVpc' } }
* Writing CreateVpnConnection
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateVpnConnection',
  operationname: 'create-vpn-connection',
  defaults: { Action: 'CreateVpnConnection' } }
* Writing CreateVpnGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'CreateVpnGateway',
  operationname: 'create-vpn-gateway',
  defaults: { Action: 'CreateVpnGateway' } }
* Writing DeleteCustomerGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteCustomerGateway',
  operationname: 'delete-customer-gateway',
  defaults: { Action: 'DeleteCustomerGateway' } }
* Writing DeleteDhcpOptions
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteDhcpOptions',
  operationname: 'delete-dhcp-options',
  defaults: { Action: 'DeleteDhcpOptions' } }
* Writing DeleteInternetGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteInternetGateway',
  operationname: 'delete-internet-gateway',
  defaults: { Action: 'DeleteInternetGateway' } }
* Writing DeleteKeyPair
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteKeyPair',
  operationname: 'delete-key-pair',
  defaults: { Action: 'DeleteKeyPair' } }
* Writing DeleteNetworkAcl
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteNetworkAcl',
  operationname: 'delete-network-acl',
  defaults: { Action: 'DeleteNetworkAcl' } }
* Writing DeleteNetworkAclEntry
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteNetworkAclEntry',
  operationname: 'delete-network-acl-entry',
  defaults: { Action: 'DeleteNetworkAclEntry' } }
* Writing DeleteNetworkInterface
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteNetworkInterface',
  operationname: 'delete-network-interface',
  defaults: { Action: 'DeleteNetworkInterface' } }
* Writing DeletePlacementGroup
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeletePlacementGroup',
  operationname: 'delete-placement-group',
  defaults: { Action: 'DeletePlacementGroup' } }
* Writing DeleteRoute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteRoute',
  operationname: 'delete-route',
  defaults: { Action: 'DeleteRoute' } }
* Writing DeleteRouteTable
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteRouteTable',
  operationname: 'delete-route-table',
  defaults: { Action: 'DeleteRouteTable' } }
* Writing DeleteSecurityGroup
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteSecurityGroup',
  operationname: 'delete-security-group',
  defaults: { Action: 'DeleteSecurityGroup' } }
* Writing DeleteSnapshot
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteSnapshot',
  operationname: 'delete-snapshot',
  defaults: { Action: 'DeleteSnapshot' } }
* Writing DeleteSpotDatafeedSubscription
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteSpotDatafeedSubscription',
  operationname: 'delete-spot-datafeed-subscription',
  defaults: { Action: 'DeleteSpotDatafeedSubscription' } }
* Writing DeleteSubnet
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteSubnet',
  operationname: 'delete-subnet',
  defaults: { Action: 'DeleteSubnet' } }
* Writing DeleteTags
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteTags',
  operationname: 'delete-tags',
  defaults: { Action: 'DeleteTags' } }
* Writing DeleteVolume
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteVolume',
  operationname: 'delete-volume',
  defaults: { Action: 'DeleteVolume' } }
* Writing DeleteVpc
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteVpc',
  operationname: 'delete-vpc',
  defaults: { Action: 'DeleteVpc' } }
* Writing DeleteVpnConnection
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteVpnConnection',
  operationname: 'delete-vpn-connection',
  defaults: { Action: 'DeleteVpnConnection' } }
* Writing DeleteVpnGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeleteVpnGateway',
  operationname: 'delete-vpn-gateway',
  defaults: { Action: 'DeleteVpnGateway' } }
* Writing DeregisterImage
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DeregisterImage',
  operationname: 'deregister-image',
  defaults: { Action: 'DeregisterImage' } }
* Writing DescribeAddresses
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeAddresses',
  operationname: 'describe-addresses',
  defaults: { Action: 'DescribeAddresses' } }
* Writing DescribeAvailabilityZones
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeAvailabilityZones',
  operationname: 'describe-availability-zones',
  defaults: { Action: 'DescribeAvailabilityZones' } }
* Writing DescribeBundleTasks
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeBundleTasks',
  operationname: 'describe-bundle-tasks',
  defaults: { Action: 'DescribeBundleTasks' } }
* Writing DescribeConversionTasks
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeConversionTasks',
  operationname: 'describe-conversion-tasks',
  defaults: { Action: 'DescribeConversionTasks' } }
* Writing DescribeCustomerGateways
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeCustomerGateways',
  operationname: 'describe-customer-gateways',
  defaults: { Action: 'DescribeCustomerGateways' } }
* Writing DescribeDhcpOptions
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeDhcpOptions',
  operationname: 'describe-dhcp-options',
  defaults: { Action: 'DescribeDhcpOptions' } }
* Writing DescribeExportTasks
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeExportTasks',
  operationname: 'describe-export-tasks',
  defaults: { Action: 'DescribeExportTasks' } }
* Writing DescribeImageAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeImageAttribute',
  operationname: 'describe-image-attribute',
  defaults: { Action: 'DescribeImageAttribute' } }
* Writing DescribeImages
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeImages',
  operationname: 'describe-images',
  defaults: { Action: 'DescribeImages' } }
* Writing DescribeInstanceAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeInstanceAttribute',
  operationname: 'describe-instance-attribute',
  defaults: { Action: 'DescribeInstanceAttribute' } }
* Writing DescribeInstanceStatus
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeInstanceStatus',
  operationname: 'describe-instance-status',
  defaults: { Action: 'DescribeInstanceStatus' } }
* Writing DescribeInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeInstances',
  operationname: 'describe-instances',
  defaults: { Action: 'DescribeInstances' } }
* Writing DescribeInternetGateways
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeInternetGateways',
  operationname: 'describe-internet-gateways',
  defaults: { Action: 'DescribeInternetGateways' } }
* Writing DescribeKeyPairs
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeKeyPairs',
  operationname: 'describe-key-pairs',
  defaults: { Action: 'DescribeKeyPairs' } }
* Writing DescribeNetworkAcls
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeNetworkAcls',
  operationname: 'describe-network-acls',
  defaults: { Action: 'DescribeNetworkAcls' } }
* Writing DescribeNetworkInterfaceAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeNetworkInterfaceAttribute',
  operationname: 'describe-network-interface-attribute',
  defaults: { Action: 'DescribeNetworkInterfaceAttribute' } }
* Writing DescribeNetworkInterfaces
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeNetworkInterfaces',
  operationname: 'describe-network-interfaces',
  defaults: { Action: 'DescribeNetworkInterfaces' } }
* Writing DescribePlacementGroups
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribePlacementGroups',
  operationname: 'describe-placement-groups',
  defaults: { Action: 'DescribePlacementGroups' } }
* Writing DescribeRegions
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeRegions',
  operationname: 'describe-regions',
  defaults: { Action: 'DescribeRegions' } }
* Writing DescribeReservedInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeReservedInstances',
  operationname: 'describe-reserved-instances',
  defaults: { Action: 'DescribeReservedInstances' } }
* Writing DescribeReservedInstancesOfferings
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeReservedInstancesOfferings',
  operationname: 'describe-reserved-instances-offerings',
  defaults: { Action: 'DescribeReservedInstancesOfferings' } }
* Writing DescribeRouteTables
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeRouteTables',
  operationname: 'describe-route-tables',
  defaults: { Action: 'DescribeRouteTables' } }
* Writing DescribeSecurityGroups
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeSecurityGroups',
  operationname: 'describe-security-groups',
  defaults: { Action: 'DescribeSecurityGroups' } }
* Writing DescribeSnapshotAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeSnapshotAttribute',
  operationname: 'describe-snapshot-attribute',
  defaults: { Action: 'DescribeSnapshotAttribute' } }
* Writing DescribeSnapshots
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeSnapshots',
  operationname: 'describe-snapshots',
  defaults: { Action: 'DescribeSnapshots' } }
* Writing DescribeSpotDatafeedSubscription
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeSpotDatafeedSubscription',
  operationname: 'describe-spot-datafeed-subscription',
  defaults: { Action: 'DescribeSpotDatafeedSubscription' } }
* Writing DescribeSpotInstanceRequests
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeSpotInstanceRequests',
  operationname: 'describe-spot-instance-requests',
  defaults: { Action: 'DescribeSpotInstanceRequests' } }
* Writing DescribeSpotPriceHistory
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeSpotPriceHistory',
  operationname: 'describe-spot-price-history',
  defaults: { Action: 'DescribeSpotPriceHistory' } }
* Writing DescribeSubnets
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeSubnets',
  operationname: 'describe-subnets',
  defaults: { Action: 'DescribeSubnets' } }
* Writing DescribeTags
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeTags',
  operationname: 'describe-tags',
  defaults: { Action: 'DescribeTags' } }
* Writing DescribeVolumeAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeVolumeAttribute',
  operationname: 'describe-volume-attribute',
  defaults: { Action: 'DescribeVolumeAttribute' } }
* Writing DescribeVolumeStatus
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeVolumeStatus',
  operationname: 'describe-volume-status',
  defaults: { Action: 'DescribeVolumeStatus' } }
* Writing DescribeVolumes
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeVolumes',
  operationname: 'describe-volumes',
  defaults: { Action: 'DescribeVolumes' } }
* Writing DescribeVpcs
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeVpcs',
  operationname: 'describe-vpcs',
  defaults: { Action: 'DescribeVpcs' } }
* Writing DescribeVpnConnections
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeVpnConnections',
  operationname: 'describe-vpn-connections',
  defaults: { Action: 'DescribeVpnConnections' } }
* Writing DescribeVpnGateways
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DescribeVpnGateways',
  operationname: 'describe-vpn-gateways',
  defaults: { Action: 'DescribeVpnGateways' } }
* Writing DetachInternetGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DetachInternetGateway',
  operationname: 'detach-internet-gateway',
  defaults: { Action: 'DetachInternetGateway' } }
* Writing DetachNetworkInterface
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DetachNetworkInterface',
  operationname: 'detach-network-interface',
  defaults: { Action: 'DetachNetworkInterface' } }
* Writing DetachVolume
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DetachVolume',
  operationname: 'detach-volume',
  defaults: { Action: 'DetachVolume' } }
* Writing DetachVpnGateway
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DetachVpnGateway',
  operationname: 'detach-vpn-gateway',
  defaults: { Action: 'DetachVpnGateway' } }
* Writing DisassociateAddress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DisassociateAddress',
  operationname: 'disassociate-address',
  defaults: { Action: 'DisassociateAddress' } }
* Writing DisassociateRouteTable
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'DisassociateRouteTable',
  operationname: 'disassociate-route-table',
  defaults: { Action: 'DisassociateRouteTable' } }
* Writing EnableVolumeIO
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'EnableVolumeIO',
  operationname: 'enable-volume-i-o',
  defaults: { Action: 'EnableVolumeIO' } }
* Writing GetConsoleOutput
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'GetConsoleOutput',
  operationname: 'get-console-output',
  defaults: { Action: 'GetConsoleOutput' } }
* Writing GetPasswordData
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'GetPasswordData',
  operationname: 'get-password-data',
  defaults: { Action: 'GetPasswordData' } }
* Writing ImportInstance
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ImportInstance',
  operationname: 'import-instance',
  defaults: { Action: 'ImportInstance' } }
* Writing ImportKeyPair
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ImportKeyPair',
  operationname: 'import-key-pair',
  defaults: { Action: 'ImportKeyPair' } }
* Writing ImportVolume
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ImportVolume',
  operationname: 'import-volume',
  defaults: { Action: 'ImportVolume' } }
* Writing ModifyImageAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ModifyImageAttribute',
  operationname: 'modify-image-attribute',
  defaults: { Action: 'ModifyImageAttribute' } }
* Writing ModifyInstanceAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ModifyInstanceAttribute',
  operationname: 'modify-instance-attribute',
  defaults: { Action: 'ModifyInstanceAttribute' } }
* Writing ModifyNetworkInterfaceAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ModifyNetworkInterfaceAttribute',
  operationname: 'modify-network-interface-attribute',
  defaults: { Action: 'ModifyNetworkInterfaceAttribute' } }
* Writing ModifySnapshotAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ModifySnapshotAttribute',
  operationname: 'modify-snapshot-attribute',
  defaults: { Action: 'ModifySnapshotAttribute' } }
* Writing ModifyVolumeAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ModifyVolumeAttribute',
  operationname: 'modify-volume-attribute',
  defaults: { Action: 'ModifyVolumeAttribute' } }
* Writing MonitorInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'MonitorInstances',
  operationname: 'monitor-instances',
  defaults: { Action: 'MonitorInstances' } }
* Writing PurchaseReservedInstancesOffering
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'PurchaseReservedInstancesOffering',
  operationname: 'purchase-reserved-instances-offering',
  defaults: { Action: 'PurchaseReservedInstancesOffering' } }
* Writing RebootInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'RebootInstances',
  operationname: 'reboot-instances',
  defaults: { Action: 'RebootInstances' } }
* Writing RegisterImage
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'RegisterImage',
  operationname: 'register-image',
  defaults: { Action: 'RegisterImage' } }
* Writing ReleaseAddress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ReleaseAddress',
  operationname: 'release-address',
  defaults: { Action: 'ReleaseAddress' } }
* Writing ReplaceNetworkAclAssociation
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ReplaceNetworkAclAssociation',
  operationname: 'replace-network-acl-association',
  defaults: { Action: 'ReplaceNetworkAclAssociation' } }
* Writing ReplaceNetworkAclEntry
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ReplaceNetworkAclEntry',
  operationname: 'replace-network-acl-entry',
  defaults: { Action: 'ReplaceNetworkAclEntry' } }
* Writing ReplaceRoute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ReplaceRoute',
  operationname: 'replace-route',
  defaults: { Action: 'ReplaceRoute' } }
* Writing ReplaceRouteTableAssociation
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ReplaceRouteTableAssociation',
  operationname: 'replace-route-table-association',
  defaults: { Action: 'ReplaceRouteTableAssociation' } }
* Writing ReportInstanceStatus
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ReportInstanceStatus',
  operationname: 'report-instance-status',
  defaults: { Action: 'ReportInstanceStatus' } }
* Writing RequestSpotInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'RequestSpotInstances',
  operationname: 'request-spot-instances',
  defaults: { Action: 'RequestSpotInstances' } }
* Writing ResetImageAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ResetImageAttribute',
  operationname: 'reset-image-attribute',
  defaults: { Action: 'ResetImageAttribute' } }
* Writing ResetInstanceAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ResetInstanceAttribute',
  operationname: 'reset-instance-attribute',
  defaults: { Action: 'ResetInstanceAttribute' } }
* Writing ResetNetworkInterfaceAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ResetNetworkInterfaceAttribute',
  operationname: 'reset-network-interface-attribute',
  defaults: { Action: 'ResetNetworkInterfaceAttribute' } }
* Writing ResetSnapshotAttribute
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'ResetSnapshotAttribute',
  operationname: 'reset-snapshot-attribute',
  defaults: { Action: 'ResetSnapshotAttribute' } }
* Writing RevokeSecurityGroupEgress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'RevokeSecurityGroupEgress',
  operationname: 'revoke-security-group-egress',
  defaults: { Action: 'RevokeSecurityGroupEgress' } }
* Writing RevokeSecurityGroupIngress
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'RevokeSecurityGroupIngress',
  operationname: 'revoke-security-group-ingress',
  defaults: { Action: 'RevokeSecurityGroupIngress' } }
* Writing RunInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'RunInstances',
  operationname: 'run-instances',
  defaults: { Action: 'RunInstances' } }
* Writing StartInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'StartInstances',
  operationname: 'start-instances',
  defaults: { Action: 'StartInstances' } }
* Writing StopInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'StopInstances',
  operationname: 'stop-instances',
  defaults: { Action: 'StopInstances' } }
* Writing TerminateInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'TerminateInstances',
  operationname: 'terminate-instances',
  defaults: { Action: 'TerminateInstances' } }
* Writing UnassignPrivateIpAddresses
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'UnassignPrivateIpAddresses',
  operationname: 'unassign-private-ip-addresses',
  defaults: { Action: 'UnassignPrivateIpAddresses' } }
* Writing UnmonitorInstances
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'Ec2',
  servicename: 'ec2',
  OperationName: 'UnmonitorInstances',
  operationname: 'unmonitor-instances',
  defaults: { Action: 'UnmonitorInstances' } }
## ----------------------------------------------------------------------------
