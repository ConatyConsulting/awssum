* Writing AbortMultipartUpload
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'AbortMultipartUpload',
  operationname: 'abort-multipart-upload' }
* Writing CheckBucket
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'CheckBucket',
  operationname: 'check-bucket' }
* Writing CompleteMultipartUpload
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'CompleteMultipartUpload',
  operationname: 'complete-multipart-upload' }
* Writing CopyObject
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'CopyObject',
  operationname: 'copy-object' }
* Writing CreateBucket
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'CreateBucket',
  operationname: 'create-bucket',
  defaults: { LocationConstraint: [Function] } }
* Writing DeleteBucket
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'DeleteBucket',
  operationname: 'delete-bucket' }
* Writing DeleteBucketLifecycle
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'DeleteBucketLifecycle',
  operationname: 'delete-bucket-lifecycle',
  defaults: { lifecycle: undefined } }
* Writing DeleteBucketPolicy
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'DeleteBucketPolicy',
  operationname: 'delete-bucket-policy',
  defaults: { policy: undefined } }
* Writing DeleteBucketTagging
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'DeleteBucketTagging',
  operationname: 'delete-bucket-tagging',
  defaults: { policy: undefined } }
* Writing DeleteBucketWebsite
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'DeleteBucketWebsite',
  operationname: 'delete-bucket-website',
  defaults: { website: undefined } }
* Writing DeleteMultipleObjects
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'DeleteMultipleObjects',
  operationname: 'delete-multiple-objects',
  defaults: { delete: undefined } }
* Writing DeleteObject
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'DeleteObject',
  operationname: 'delete-object' }
* Writing GetBucketAcl
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketAcl',
  operationname: 'get-bucket-acl',
  defaults: { acl: undefined } }
* Writing GetBucketLifecycle
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketLifecycle',
  operationname: 'get-bucket-lifecycle',
  defaults: { lifecycle: undefined } }
* Writing GetBucketLocation
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketLocation',
  operationname: 'get-bucket-location',
  defaults: { location: undefined } }
* Writing GetBucketLogging
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketLogging',
  operationname: 'get-bucket-logging',
  defaults: { logging: undefined } }
* Writing GetBucketNotification
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketNotification',
  operationname: 'get-bucket-notification',
  defaults: { notification: undefined } }
* Writing GetBucketObjectVersions
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketObjectVersions',
  operationname: 'get-bucket-object-versions',
  defaults: { versions: undefined } }
* Writing GetBucketPolicy
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketPolicy',
  operationname: 'get-bucket-policy',
  defaults: { policy: undefined } }
* Writing GetBucketRequestPayment
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketRequestPayment',
  operationname: 'get-bucket-request-payment',
  defaults: { requestPayment: undefined } }
* Writing GetBucketTagging
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketTagging',
  operationname: 'get-bucket-tagging',
  defaults: { tagging: undefined } }
* Writing GetBucketVersioning
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketVersioning',
  operationname: 'get-bucket-versioning',
  defaults: { versioning: undefined } }
* Writing GetBucketWebsite
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetBucketWebsite',
  operationname: 'get-bucket-website',
  defaults: { website: undefined } }
* Writing GetObject
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetObject',
  operationname: 'get-object' }
* Writing GetObjectAcl
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetObjectAcl',
  operationname: 'get-object-acl',
  defaults: { acl: undefined } }
* Writing GetObjectMetadata
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetObjectMetadata',
  operationname: 'get-object-metadata' }
* Writing GetObjectTorrent
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'GetObjectTorrent',
  operationname: 'get-object-torrent',
  defaults: { torrent: undefined } }
* Writing InitiateMultipartUpload
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'InitiateMultipartUpload',
  operationname: 'initiate-multipart-upload',
  defaults: { uploads: undefined } }
* Writing ListBuckets
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'ListBuckets',
  operationname: 'list-buckets' }
* Writing ListMultipartUploads
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'ListMultipartUploads',
  operationname: 'list-multipart-uploads',
  defaults: { uploads: undefined } }
* Writing ListObjects
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'ListObjects',
  operationname: 'list-objects' }
* Writing ListParts
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'ListParts',
  operationname: 'list-parts' }
* Writing PutBucketAcl
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketAcl',
  operationname: 'put-bucket-acl',
  defaults: { acl: undefined } }
* Writing PutBucketLifecycle
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketLifecycle',
  operationname: 'put-bucket-lifecycle',
  defaults: { lifecycle: undefined } }
* Writing PutBucketLogging
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketLogging',
  operationname: 'put-bucket-logging',
  defaults: { logging: undefined } }
* Writing PutBucketNotification
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketNotification',
  operationname: 'put-bucket-notification',
  defaults: { logging: undefined } }
* Writing PutBucketPolicy
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketPolicy',
  operationname: 'put-bucket-policy',
  defaults: { policy: undefined } }
* Writing PutBucketRequestPayment
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketRequestPayment',
  operationname: 'put-bucket-request-payment',
  defaults: { logging: undefined } }
* Writing PutBucketTagging
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketTagging',
  operationname: 'put-bucket-tagging',
  defaults: { tagging: undefined } }
* Writing PutBucketVersioning
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketVersioning',
  operationname: 'put-bucket-versioning',
  defaults: { versioning: undefined } }
* Writing PutBucketWebsite
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutBucketWebsite',
  operationname: 'put-bucket-website',
  defaults: { website: undefined } }
* Writing PutObject
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutObject',
  operationname: 'put-object' }
* Writing PutObjectAcl
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'PutObjectAcl',
  operationname: 'put-object-acl',
  defaults: { acl: undefined } }
* Writing UploadPart
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'UploadPart',
  operationname: 'upload-part' }
* Writing UploadPartCopy
{ ProviderName: 'Amazon',
  providername: 'amazon',
  ServiceName: 'S3',
  servicename: 's3',
  OperationName: 'UploadPartCopy',
  operationname: 'upload-part-copy' }
## ----------------------------------------------------------------------------
