name    : ListMetrics
title   : List all saved metrics
intro   : This example shows how to list all saved metrics.
example : <<EOF
cw.ListMetrics({}, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
cw.ListMetrics(function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
result: <<EOF
{ StatusCode: 200,
  Headers: 
   { 'x-amzn-requestid': 'db663d89-2a35-11e2-979b-a7ae25374ec4',
     'content-type': 'text/xml',
     'content-length': '21555',
     date: 'Fri, 09 Nov 2012 06:22:37 GMT' },
  Body: 
   { ListMetricsResponse: 
      { '@': { xmlns: 'http://monitoring.amazonaws.com/doc/2010-08-01/' },
        ListMetricsResult: 
         { Metrics: 
            { member: 
               [ { Dimensions: { member: { Name: 'VolumeId', Value: 'vol-3eb61914' } },
                   MetricName: 'VolumeTotalReadTime',
                   Namespace: 'AWS/EBS' },
                 { Dimensions: { member: { Name: 'VolumeId', Value: 'vol-c28f20e8' } },
                   MetricName: 'VolumeReadOps',
                   Namespace: 'AWS/EBS' },
                 { Dimensions: { member: { Name: 'QueueName', Value: 'ochtendtest' } },
                   MetricName: 'NumberOfMessagesSent',
                   Namespace: 'AWS/SQS' },
                 { Dimensions: { member: { Name: 'VolumeId', Value: 'vol-c28f20e8' } },
                   MetricName: 'VolumeTotalWriteTime',
                   Namespace: 'AWS/EBS' },
                 { Dimensions: { member: { Name: 'VolumeId', Value: 'vol-2a993200' } },
                   MetricName: 'VolumeTotalWriteTime',
                   Namespace: 'AWS/EBS' },
                 { Dimensions: { member: { Name: 'InstanceId', Value: 'i-79ea3031' } },
                   MetricName: 'DiskWriteOps',
                   Namespace: 'AWS/EC2' },
                 { Dimensions: { member: { Name: 'InstanceId', Value: 'i-5026b11b' } },
                   MetricName: 'DiskWriteBytes',
                   Namespace: 'AWS/EC2' } ] } },
        ResponseMetadata: { RequestId: 'db663d89-2a35-11e2-979b-a7ae25374ec4' } } } }
}
EOF
---
name    : ListMetrics
title   : List all saved metrics
intro   : This example shows how to list all saved metrics.
example : <<EOF
cw.ListMetrics({}, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
cw.ListMetrics(function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : DescribeAlarms
title   : List all alarms
intro   : This example shows how to list all alarms.
example : <<EOF
cw.DescribeAlarms({}, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
cw.DescribeAlarms(function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : DescribeAlarms
title   : List all alarms with a specific state
intro   : This example shows how to list all alarms with a specific state. Values of StateValue can be "OK", "ALARM" or "INSUFFICIENT_DATA".
example : <<EOF
var params = {
    StateValue : 'INSUFFICIENT_DATA'
};
cw.DescribeAlarms(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : DescribeAlarms
title   : List all alarms with a specific state
intro   : This example shows how to list all alarms with a specific state. Values of StateValue can be "OK", "ALARM" or "INSUFFICIENT_DATA".
example : <<EOF
var params = {
    StateValue : 'INSUFFICIENT_DATA'
};
cw.DescribeAlarms(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : DescribeAlarmsForMetric
title   : List all alarms for a specific metric
intro   : This example shows how to list all alarms for a specific metric.
example : <<EOF
var params = {
    MetricName  : 'ConsumedReadCapacityUnits',
    Namespace   : 'AWS/DynamoDB',
    Dimensions  : [
        { Name : 'TableName', Value : 'test' },
        { Name : 'TableName', Value : 'test-tweets' }
    ],
    Unit        : 'Count'
};
cw.DescribeAlarmsForMetric(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : DescribeAlarmHistory
title   : List a specific alarm history
intro   : This example shows how to list a specific alarm history.
example : <<EOF
var params = {
    AlarmName : 'checkEC2'
};
cw.DescribeAlarmHistory(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : DeleteAlarms
title   : Delete an alarm
intro   : This example shows how to delete an alarm. You can delete a maximum of 100 in 1 call.
example : <<EOF
var params = {
    AlarmNames : ['yourAlarmName','anotherAlarmName']
};
cw.DeleteAlarms(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : GetMetricStatistics
title   : List a specific statistic of a metric
intro   : This example shows how to list a specific statistic of a metric. Ensure you use the correct Date definition (ISO8601) and watch out with (non)capitalized definitions of Unit and Statistics, they need to be "Capitalized".
example : <<EOF
var dt = new Date();
dt.setDate(dt.getDate()-1);
var params = {
    MetricName  : 'yourMetricName',
    Namespace   : 'test',
    Period      : 60,
    Statistics  : ['Sum'],
    Unit        : 'Seconds',
    StartTime   : dt.toISOString('8601'),
    EndTime     : new Date().toISOString('8601')
};
cw.GetMetricStatistics(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : GetMetricStatistics
title   : List CPU usage in a hour
intro   : This example shows how to list CPU usage in a hour. Important to note is when you use default monitoring without Dimensions-parameter you will not get any information. Use, like below, an exact InstanceId to list all metrics you like to show. If detailed monitoring is on, you may ignore the Dimensions-property if you want to list all responses. Cloudwatch can not only provide standard metrics but also your own custom metrics. Ensure you use the correct Date definition (ISO8601) and watch out with (non)capitalized definitions of Unit and Statistics, they need to be "Capitalized".
(Credits to Paul Howes)
example : <<EOF
var hourInMilliseconds = 1000 * 60 * 60;
var endTime = new Date();
var startTime = new Date(endTime.getTime() - hourInMilliseconds);
var params = {
    MetricName  : 'CPUUtilization',
    Namespace   : 'AWS/EC2',
    Period      : 60,
    Statistics  : ['Average'],
    Unit        : ['Percent'],
    Dimensions  : [{ Name: 'InstanceId', Value: 'i-1234fake' }],
    StartTime   : startTime.toISOString('8601'),
    EndTime     : endTime.toISOString('8601')
};
cw.GetMetricStatistics(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
result : <<EOF
{ StatusCode: 200,
  Headers: 
   { 'x-amzn-requestid': '67e1c18f-3ac6-11e2-8d6a-5f7cd605490f',
     'content-type': 'text/xml',
     'content-length': '1681',
     date: 'Fri, 30 Nov 2012 08:17:39 GMT' },
  Body: 
   { GetMetricStatisticsResponse: 
      { '@': { xmlns: 'http://monitoring.amazonaws.com/doc/2010-08-01/' },
        GetMetricStatisticsResult: 
         { Datapoints: 
            { member: 
               [ { Timestamp: '2012-11-30T07:43:00Z',
                   Unit: 'Percent',
                   Average: '0.23399999999999999' },
                 { Timestamp: '2012-11-30T08:08:00Z',
                   Unit: 'Percent',
                   Average: '0.242' }
               ] 
            },
           Label: 'CPUUtilization' 
         },
        ResponseMetadata: { RequestId: '67e1c18f-3ac6-11e2-8d6a-5f7cd605490f' } } } }
EOF
---
name    : SetAlarmState
title   : Set a state for a specific alarm
intro   : This example shows how to set a state for a specific alarm. State values can be "OK", "ALARM" or "INSUFFICIENT_DATA".
example : <<EOF
var params = {
    AlarmName   : 'yourAlarmName',
    StateReason : 'Set because of a test, but need to be descriptive of why this is needed. Maximum of 1023 characters.',
    StateValue  : 'OK'
}
cw.SetAlarmState(params, function(err, data) {
    if(err){
        fmt.dump(err, 'Error');
    }else{
        fmt.dump(data, 'Data');
    }
});
EOF
---
name    : EnableAlarmActions
title   : Enable actions for a specific alarm
intro   : This example shows how to enable actions for a specific alarm.
example : <<EOF
var params = {
    AlarmNames : ['yourAlarmName']
}
cw.EnableAlarmActions(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : DisableAlarmActions
title   : Disable actions for a specific alarm
intro   : This example shows how to disable actions for a specific alarm.
example : <<EOF
var params = {
    AlarmNames : ['yourAlarmName']
}
cw.DisableAlarmActions(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : PutMetricAlarm
title   : Create/update an alarm
intro   : This example shows how to create/update an alarm. ComparisonOperator values can be "GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanThreshold" or "LessThanOrEqualToThreshold".
example : <<EOF
var params = {
    AlarmName           : 'yourAlarmName',
    MetricName          : 'CPUUtilization',
    Namespace           : 'test',
    Period              : 60,
    Statistic           : 'Average',
    Threshold           : 40,
    ComparisonOperator  : 'GreaterThanOrEqualToThreshold',
    EvaluationPeriods   : 6
}
cw.PutMetricAlarm(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : PutMetricData
title   : Publish metric data points to Cloudwatch
intro   : This example shows how to publish metric data points to Cloudwatch.
example : <<EOF
var params = {
    MetricData : [
    {
        MetricName  : 'Counter',
        Unit        : 'Count',
        Value       : 1,
        Timestamp   : new Date().toISOString(8601),
        Dimensions  : [
            { Name : 'InstanceId',   Value : 'i-aaba32d5' },
            { Name : 'InstanceType', Value : 'm1.micro' }
        ]
    }],
    Namespace : 'test'
}
cw.PutMetricData(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---
name    : PutMetricData
title   : Publish metric (time) data points to Cloudwatch
intro   : This example shows how to publish metric (time) data points to Cloudwatch.
example : <<EOF
var params = {
    MetricData : [
    {
        MetricName      : 'Time',
        Unit            : 'Milliseconds',
        StatisticValues : {
            Minimum: 3,
            Maximum: 1500,
            Sum: 3000,
            SampleCount: 10
        }
    }],
    Namespace : 'test'
}
cw.PutMetricData(params, function(err, data) {
    fmt.dump(err, 'Error');
    fmt.dump(data, 'Data');
});
EOF
---